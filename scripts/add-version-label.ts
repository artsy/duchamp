import { danger } from "danger"

/**
 * Configuration for version and documentation labels used in pull requests
 * These labels are automatically created if they don't exist in the repository
 */
export const labels = {
  "Version: Patch": {
    color: "E0E4CC",
    description: "A deploy for bug fixes or minor changes",
  },
  "Version: Minor": {
    color: "A7DBD8",
    description: "A deploy for new features",
  },
  "Version: Major": {
    color: "FA6900",
    description: "A deploy for breaking changes to clients",
  },
  "Version: Trivial": {
    color: "A7DBD8",
    description: "Skip a deploy for this PR",
  },
  Docs: {
    color: "#64EA72",
    description: "Documentation only changes",
  },
}

/**
 * Automatically add version labels to PRs that don't already have version indicators
 *
 * This function:
 * 1. Checks if the repository has an .autorc file (required for auto-release)
 * 2. Skips if a version label already exists
 * 3. Creates labels in the repository if they don't exist
 * 4. Applies appropriate labels based on PR characteristics:
 *    - Netlify CMS PRs get "Docs" label
 *    - Dependabot PRs get "Version: Trivial" label
 *    - All others default to "Version: Minor"
 *
 * @see https://github.com/artsy/reaction/issues/1095
 */
export default async () => {
  const pr = danger.github.pr

  // Only process repositories that use auto-release (have .autorc)
  const hasAutoRC = await danger.github.utils.fileContents(".autorc")
  if (!hasAutoRC) {
    console.log(`Skipping, because this repo does not have an .autorc file.`)
    return
  }

  let labelName: keyof typeof labels = "Version: Minor"

  // Skip if someone has already made a decision on the version
  const hasVersionLabel = danger.github.issue.labels.find(label =>
    Object.keys(labels).includes(label.name)
  )
  if (hasVersionLabel) {
    console.log(`Skipping, because this PR already has a version label.`)
    return
  }

  const config = {
    owner: pr.base.user.login,
    repo: pr.base.repo.name,
  }

  const api = danger.github.api
  const existingLabels = await api.issues.listLabelsForRepo(config)
  const versionExists = existingLabels.data.find(label =>
    Object.keys(labels).includes(label.name)
  )

  // Create version labels if this is a new repository
  if (!versionExists) {
    console.log(
      `Creating labels for release versions, because we're running on a new repo.`
    )
    for (const [label, labelProperties] of Object.entries(labels)) {
      await api.issues.createLabel({
        name: label,
        ...config,
        ...labelProperties,
      })
    }
  }

  // Special case: Netlify CMS automated PRs should be labeled as docs
  if (pr.body.includes("Automatically generated by Netlify CMS")) {
    labelName = "Docs"
  }

  // Special case: Dependabot PRs should be labeled as trivial (no release)
  if (danger.github.issue.labels.find(label => label.name === "dependencies")) {
    labelName = "Version: Trivial"
  }

  // Apply the determined label
  console.log(`Adding the \`${labelName}\` label to this PR.`)
  await api.issues.addLabels({
    issue_number: pr.number,
    ...config,
    labels: [labelName],
  })
}
