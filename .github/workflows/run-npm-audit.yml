name: ðŸ”’ NPM Audit

on:
  workflow_call:
    inputs:
      node-version:
        default: "22"
        required: false
        type: string
      fail-on-vulnerabilities:
        default: true
        required: false
        type: boolean
      severity-threshold:
        default: "critical"
        required: false
        type: string

jobs:
  npm-audit:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}

      - run: corepack enable
      - run: corepack install

      - name: Run Yarn Audit (JSON)
        id: audit
        run: |
          set -o pipefail
          yarn npm audit --recursive --json > audit.json || true

      - name: Comment Vulnerabilities
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const threshold = '${{ inputs.severity-threshold }}'.toLowerCase();
            const levels = ["low", "moderate", "high", "critical"];
            const thresholdIndex = levels.indexOf(threshold);

            const lines = fs.readFileSync('audit.json', 'utf8').trim().split('\n');
            const advisories = lines
              .map(line => { try { return JSON.parse(line); } catch { return null; } })
              .filter(obj => obj && obj.children && obj.children.Severity)
              .map(obj => ({
                module: obj.value,
                severity: obj.children.Severity.toLowerCase(),
                versions: obj.children["Vulnerable Versions"],
                id: obj.children.ID,
                title: obj.children.Issue,
                url: obj.children.URL || "",
              }))
              .filter(adv => levels.indexOf(adv.severity) >= thresholdIndex);

            if (advisories.length === 0) {
              console.log(`No ${threshold} or higher advisories found in JSON.`);
              return;
            }

            let body = "## ðŸ”’ NPM Audit Results\n";
            body += `Vulnerabilities detected at severity **${threshold}** or higher:\n\n`;
            for (const adv of advisories) {
              body += `- **${adv.module}** ${adv.versions}\n`;
              body += `  - Severity: ${adv.severity}\n`;
              body += `  - ID: ${adv.id}\n`;
              body += `  - Title: ${adv.title}\n`;
              body += `  - URL: ${adv.url}\n\n`;
            }

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });

            core.exportVariable('VULNS_FOUND', 'true');

      - name: Fail if vulnerabilities found
        if: env.VULNS_FOUND == 'true' && inputs.fail-on-vulnerabilities == true
        run: exit 1